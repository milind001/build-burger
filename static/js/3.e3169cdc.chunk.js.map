{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/FormInput/formInput.js"],"names":["checkoutSummary","props","className","style","width","margin","ingredients","clicked","checkoutCancelled","btnType","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","valueType","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","orderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","invalid","shouldValidate","changed","disabled","loading","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchaseRedirect","purchased","path","match","component","FormInput","inputElement","inputClasses","validationError","join","onChange","option"],"mappings":"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","file":"static/js/3.e3169cdc.chunk.js","sourcesContent":["import React from 'react';\r\nimport Burger from '../../Burger/burger';\r\nimport CustomButton from '../../UI/Button/button';\r\nimport './CheckoutSummary.scss';\r\n\r\nconst checkoutSummary = (props) => {\r\n     return (\r\n         <div className='CheckoutSummary'>\r\n             <h1>We hope it tastes well!</h1>\r\n             <div style={{width: '100%', margin: 'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n             </div>\r\n             <CustomButton \r\n                clicked={props.checkoutCancelled}\r\n                btnType='Danger'>CANCEL</CustomButton>\r\n             <CustomButton \r\n                clicked={props.checkoutContinued}\r\n                btnType='Success'>CONTINUE</CustomButton>\r\n         </div>\r\n     );\r\n}\r\n\r\nexport default checkoutSummary;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CustomButton from '../../../components/UI/Button/button';\r\nimport axios from '../../../axios';\r\nimport './ContactData.scss';\r\nimport Spinner from '../../../components/UI/Spinner/spinner';\r\nimport FormInput from '../../../components/UI/FormInput/formInput';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                valueType: 'Name'\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Steet'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                valueType: 'Street'\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6,\r\n                    maxLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                valueType: 'ZIP Code'\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                valueType: 'Country'\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your Email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false,\r\n                valueType: 'Email'\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valueType: 'Method',\r\n                valid: true\r\n            }\r\n        },\r\n        formIsValid: false       \r\n    }\r\n\r\n    orderHandler = event => {\r\n        event.preventDefault();\r\n\r\n        const formData = {};\r\n        for( let formElementIdentifier in this.state.orderForm ){\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n\r\n        this.props.orderBurger(order, this.props.token);\r\n        \r\n    }\r\n\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n\r\n\r\n        const updatedFormElement =  updateObject(this.state.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        });\r\n\r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            [inputIdentifier]: updatedFormElement\r\n        });\r\n        \r\n        let formIsValid = true;\r\n        for(let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n\r\n        this.setState({ orderForm: updatedOrderForm, formIsValid: formIsValid  });\r\n    }\r\n\r\n    render() {\r\n        const formElementsArray= [];\r\n        for( let key in this.state.orderForm ) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n\r\n        let form = (\r\n                <form onSubmit={this.orderHandler}>\r\n                    {formElementsArray.map(formElement => (\r\n                        <FormInput \r\n                            key={formElement.id}\r\n                            elementType={formElement.config.elementType}\r\n                            elementConfig={formElement.config.elementConfig}\r\n                            value={formElement.config.value}\r\n                            invalid={!formElement.config.valid}\r\n                            shouldValidate={formElement.config.validation}\r\n                            touched={formElement.config.touched}\r\n                            valueType={formElement.config.valueType}\r\n                            changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n                    ))}\r\n                    <CustomButton btnType=\"Success\" disabled={!this.state.formIsValid}>Order</CustomButton>\r\n                </form>\r\n        );\r\n        if(this.props.loading){\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <div className='ContactData'>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        orderBurger : (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, {Component} from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\nclass Checkout extends Component {\r\n\r\n    // fetch data from query params\r\n    // componentDidMount() {\r\n    //     const query = new URLSearchParams(this.props.location.search);\r\n    //     const ingredients = {};\r\n    //     let price = 0;\r\n    //     for(let param of query.entries()) {\r\n    //         // ['salad', '1']\r\n    //         if(param[0] === 'price'){\r\n    //             price = param[1];\r\n    //         } else {\r\n    //             ingredients[param[0]] = +param[1];\r\n    //         }\r\n            \r\n    //         this.setState({ingredients: ingredients, price: price});\r\n    //     }\r\n    // }\r\n\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack(); \r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace('/checkout/contact-data');\r\n    }    \r\n\r\n    render() {\r\n        let summary = <Redirect to=\"/\" />\r\n        \r\n        if(this.props.ings){\r\n\r\n            const purchaseRedirect = this.props.purchased ? <Redirect to=\"/\" /> : null;\r\n\r\n            summary = (\r\n                <div>\r\n                    {purchaseRedirect}\r\n                    <CheckoutSummary \r\n                        ingredients={this.props.ings}\r\n                        checkoutCancelled={this.checkoutCancelledHandler}\r\n                        checkoutContinued={this.checkoutContinuedHandler} />\r\n                    <Route \r\n                        path={this.props.match.path + '/contact-data'} \r\n                        component={ContactData} />  \r\n                </div>          \r\n            );\r\n        }\r\n        return summary;\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(Checkout);","import React from 'react';\r\nimport './formInput.scss'; \r\n\r\nconst FormInput = ({ valueType, elementType, elementConfig, value, changed, invalid, shouldValidate, touched }) => {\r\n    let inputElement = null;\r\n    const inputClasses = ['InputElement'];\r\n\r\n    if (invalid && shouldValidate && touched) {\r\n        inputClasses.push('Invalid'); \r\n    }\r\n\r\n    let validationError = null;\r\n    if (invalid && touched) {\r\n        validationError = <p>Please enter a valid {valueType}!</p>;\r\n    }\r\n\r\n    switch( elementType ) {\r\n        case ( 'input' ):\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')}\r\n                {...elementConfig} \r\n                value={value}\r\n                onChange={changed} />;\r\n            break;\r\n        case ( 'textarea' ):\r\n            inputElement = <textarea \r\n                className={inputClasses.join(' ')} \r\n                {...elementConfig} \r\n                value={value}\r\n                onChange={changed} />;\r\n            break;\r\n        case ( 'select' ):\r\n            inputElement = ( \r\n                <select \r\n                    className={inputClasses.join(' ')} \r\n                    value={value}\r\n                    onChange={changed} >\r\n                    {\r\n                        elementConfig.options.map(option => (\r\n                            <option key={option.value} value={option.value}>\r\n                                {option.displayValue}\r\n                            </option>\r\n                        )) \r\n                    }    \r\n                </select>\r\n                );\r\n            break;\r\n        default:\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...elementConfig} \r\n                value={value}\r\n                onChange={changed} />;        \r\n    }\r\n    \r\n    return (\r\n    <div className='Input'>\r\n        {/* <label className='Label'>{label}</label> */}\r\n        { inputElement }\r\n        <p className='ValidationError'>{validationError}</p>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default FormInput;"],"sourceRoot":""}