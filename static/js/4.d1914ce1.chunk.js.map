{"version":3,"sources":["containers/Auth/Auth.js","components/UI/FormInput/formInput.js"],"names":["Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignUp","inputChangedHandler","event","controlName","updatedControl","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","authRedirect","isAuthenticated","to","className","onSubmit","btnType","clicked","Component","connect","auth","error","token","burgerBuilder","building","dispatch","actions","FormInput","valueType","inputElement","inputClasses","validationError","join","onChange","options","option","displayValue"],"mappings":"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","file":"static/js/4.d1914ce1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nimport CustomButton from '../../components/UI/Button/button';\r\nimport FormInput from '../../components/UI/FormInput/formInput';\r\nimport './Auth.scss';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../components/UI/Spinner/spinner';\r\n\r\nclass Auth extends Component {\r\n\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignUp: true\r\n    };\r\n\r\n    componentDidMount () {\r\n        if(!this.props.buildingBurger && this.props.authRedirectPath !== '/'){\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControl = updateObject(this.state.controls, {\r\n            [controlName]: updateObject(this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, this.state.controls[controlName].validation ),\r\n                touched: true\r\n            })\r\n        });\r\n        this.setState({controls: updatedControl});\r\n    }\r\n\r\n    submitHandler = event => {\r\n        event.preventDefault();\r\n        this.props.onAuth(this.state.controls.email.value, this.state.controls.password.value, this.state.isSignUp);\r\n    };\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState(prevState => {\r\n            return {isSignUp: !prevState.isSignUp}\r\n        });\r\n    };\r\n\r\n    render () {\r\n\r\n        const formElementsArray= [];\r\n        for( let key in this.state.controls ) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            });\r\n        }\r\n\r\n        let form = formElementsArray.map( formElement => (\r\n            <FormInput \r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={(event) => this.inputChangedHandler(event, formElement.id)} />   \r\n        ) );\r\n\r\n        if(this.props.loading) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        // let errorMessage = null;\r\n        // if(this.props.error) {\r\n        //     errorMessage = (\r\n        //         <p>{this.props.error.message}</p> \r\n        //     );\r\n        // }\r\n\r\n        let authRedirect = null;\r\n        if(this.props.isAuthenticated){\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (            \r\n            <div className='Auth'>\r\n                {authRedirect}\r\n                {/* {errorMessage} */}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <CustomButton btnType=\"Success\">SUBMIT</CustomButton>\r\n                    <CustomButton\r\n                        clicked={this.switchAuthModeHandler} \r\n                        btnType=\"Danger\">Switch To {this.state.isSignUp ? 'SIGN IN' : 'SIGN UP'}</CustomButton>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);","import React from 'react';\r\nimport './formInput.scss'; \r\n\r\nconst FormInput = ({ valueType, elementType, elementConfig, value, changed, invalid, shouldValidate, touched }) => {\r\n    let inputElement = null;\r\n    const inputClasses = ['InputElement'];\r\n\r\n    if (invalid && shouldValidate && touched) {\r\n        inputClasses.push('Invalid'); \r\n    }\r\n\r\n    let validationError = null;\r\n    if (invalid && touched) {\r\n        validationError = <p>Please enter a valid {valueType}!</p>;\r\n    }\r\n\r\n    switch( elementType ) {\r\n        case ( 'input' ):\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')}\r\n                {...elementConfig} \r\n                value={value}\r\n                onChange={changed} />;\r\n            break;\r\n        case ( 'textarea' ):\r\n            inputElement = <textarea \r\n                className={inputClasses.join(' ')} \r\n                {...elementConfig} \r\n                value={value}\r\n                onChange={changed} />;\r\n            break;\r\n        case ( 'select' ):\r\n            inputElement = ( \r\n                <select \r\n                    className={inputClasses.join(' ')} \r\n                    value={value}\r\n                    onChange={changed} >\r\n                    {\r\n                        elementConfig.options.map(option => (\r\n                            <option key={option.value} value={option.value}>\r\n                                {option.displayValue}\r\n                            </option>\r\n                        )) \r\n                    }    \r\n                </select>\r\n                );\r\n            break;\r\n        default:\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')} \r\n                {...elementConfig} \r\n                value={value}\r\n                onChange={changed} />;        \r\n    }\r\n    \r\n    return (\r\n    <div className='Input'>\r\n        {/* <label className='Label'>{label}</label> */}\r\n        { inputElement }\r\n        <p className='ValidationError'>{validationError}</p>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default FormInput;"],"sourceRoot":""}